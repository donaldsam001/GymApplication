package com.example.temp.Controller;

import com.example.temp.DAO.MemberDAO;
import com.example.temp.DAO.MemberCardDAO;
import com.example.temp.DAO.MembershipPackageDAO;
import com.example.temp.DAO.PackageSalesStatsDAO;
import com.example.temp.Models.MembershipCard;
import com.example.temp.Models.MembershipPackage;
import com.example.temp.Models.PackageSalesStats;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;


public class MembershipCardController {

    @FXML private TextField customerIDField;
    @FXML private ComboBox<MembershipPackage> goiComboBox;
    @FXML private DatePicker startDatePicker;
    @FXML private DatePicker endDatePicker;
    @FXML private TableView<MembershipCard> cardTableView;
    @FXML private TableColumn<MembershipCard, Integer> colCustomerID;
    @FXML private TableColumn<MembershipCard, String> colName;
    @FXML private TableColumn<MembershipCard, String> colStartDate;
    @FXML private TableColumn<MembershipCard, String> colEndDate;
    @FXML private TableColumn<MembershipCard, String> colPackage;
    @FXML private TextField packageIDField;
    @FXML private TextField expField;
    @FXML private TextField inputSearch;

    private ObservableList<MembershipCard> cardList;

    @FXML
    public void initialize() {
        colCustomerID.setCellValueFactory(new PropertyValueFactory<>("customerID"));
        colName.setCellValueFactory(new PropertyValueFactory<>("customerName")); // s·ª≠a l·∫°i
        colStartDate.setCellValueFactory(new PropertyValueFactory<>("startDate"));
        colEndDate.setCellValueFactory(new PropertyValueFactory<>("endDate"));
        colPackage.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getPackageName()));
        inputSearch.textProperty().addListener((obs, oldVal, newVal) -> searchByCustomerID());

        startDatePicker.setValue(LocalDate.now());
        goiComboBox.setOnAction(event -> {
            updateEndDate();
            displayPackageInfo(); // C·∫≠p nh·∫≠t th√¥ng tin g√≥i
        });


        try {
            List<MembershipPackage> packages = new MembershipPackageDAO().getActivePackages();
            goiComboBox.setItems(FXCollections.observableArrayList(packages));
        } catch (Exception e) {
            showAlert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch g√≥i h·ªôi vi√™n: " + e.getMessage());
        }

        try {
            cardList = FXCollections.observableArrayList(MemberCardDAO.getAllMemberCards());
            cardTableView.setItems(cardList);
        } catch (Exception e) {
            showAlert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch th·∫ª: " + e.getMessage());
        }


    }


    private void updateEndDate() {
        MembershipPackage selected = goiComboBox.getValue();
        if (selected == null) return;
        LocalDate startDate = startDatePicker.getValue() != null ? startDatePicker.getValue() : LocalDate.now();
        endDatePicker.setValue(startDate.plusMonths(selected.getExp()));
    }

    @FXML
    private void handlePayment() {
        int id = Integer.parseInt(customerIDField.getText());
        MembershipPackage selectedPackage = goiComboBox.getValue();
        LocalDate startDate = startDatePicker.getValue();
        LocalDate endDate = endDatePicker.getValue();

        if (id < 100000 || id > 999999 || selectedPackage == null || startDate == null || endDate == null) {
            showAlert("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
            return;
        }

        if (!MemberDAO.isCustomerIDExists(id)) {
            showAlert("L·ªói", "M√£ h·ªôi vi√™n kh√¥ng h·ª£p l·ªá.");
            return;
        }

        if (MemberCardDAO.isCustomerIDExists(id)) {
            showAlert("L·ªói", "M√£ kh√°ch h√†ng " + id + " ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn m√£ kh√°c.");
            return;
        }

        String name = MemberDAO.getCustomerNameById(id);

        // D√πng ƒë√∫ng constructor
        MembershipCard card = new MembershipCard(
                id,
                name,
                selectedPackage.getPackageID(),
                selectedPackage.getPackageName(),
                startDate.toString(),
                endDate.toString(),
                selectedPackage.getExp()
        );

        if (MemberCardDAO.insertMemberCard(card)) {
            cardList.add(card);
            showAlert("Th√†nh c√¥ng", "ƒêƒÉng k√Ω th·∫ª th√†nh c√¥ng.");

            PackageSalesStatsDAO salesDAO = new PackageSalesStatsDAO();
            PackageSalesStats sale = new PackageSalesStats();
            sale.setCustomerId(id);
            sale.setPackageId(selectedPackage.getPackageID());
            sale.setTotalPrice(selectedPackage.getPrice());
            sale.setSaleDate(LocalDate.now());
            sale.setType("new");
            salesDAO.insertPackageSale(sale);
//            salesDAO.updateOrInsertStats(selectedPackage.getPackageID(), selectedPackage.getPrice());

            customerIDField.clear();
            goiComboBox.setValue(null);
            startDatePicker.setValue(LocalDate.now());
            endDatePicker.setValue(null);
        } else {
            showAlert("L·ªói", "Kh√¥ng th·ªÉ ƒëƒÉng k√Ω th·∫ª. Ki·ªÉm tra l·ªói: " + MemberCardDAO.getLastError());
        }
    }

    @FXML
    private void handleRenewCard() {
        MembershipCard selected = cardTableView.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showAlert("L·ªói", "Vui l√≤ng ch·ªçn th·∫ª c·∫ßn gia h·∫°n.");
            return;
        }

        int packageID = selected.getPackageID();
        MembershipPackageDAO dao = new MembershipPackageDAO();
        List<MembershipPackage> packages = dao.getActivePackages();
        MembershipPackage matchedPackage = packages.stream()
                .filter(p -> p.getPackageID() == packageID)
                .findFirst()
                .orElse(null);

        if (matchedPackage == null) {
            showAlert("L·ªói", "Kh√¥ng t√¨m th·∫•y g√≥i h·ªôi vi√™n t∆∞∆°ng ·ª©ng ƒë·ªÉ gia h·∫°n.");
            return;
        }

        LocalDate oldEndDate;
        try {
            oldEndDate = LocalDate.parse(selected.getEndDate());
        } catch (Exception e) {
            showAlert("L·ªói", "Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá: " + e.getMessage());
            return;
        }

        LocalDate newEndDate = oldEndDate.plusMonths(matchedPackage.getExp());
        selected.setEndDate(newEndDate.toString());

        try {
            if (MemberCardDAO.updateMemberCardEndDate(selected.getCustomerID(), newEndDate.toString())) {
                PackageSalesStatsDAO packageSalesDAO = new PackageSalesStatsDAO();
                PackageSalesStats sale = new PackageSalesStats();
                sale.setCustomerId(selected.getCustomerID());
                sale.setPackageId(packageID);
                sale.setTotalPrice(matchedPackage.getPrice());
                sale.setSaleDate(LocalDate.now());
                sale.setType("renewal");

                packageSalesDAO.insertPackageSale(sale);
//                packageSalesDAO.updateOrInsertStats(packageID, matchedPackage.getPrice());

                cardTableView.refresh();
                showAlert("Th√†nh c√¥ng", "Gia h·∫°n th·∫ª th√†nh c√¥ng. Ng√†y h·∫øt h·∫°n m·ªõi: " + newEndDate);
            } else {
                showAlert("L·ªói", "Kh√¥ng th·ªÉ gia h·∫°n th·∫ª. Ki·ªÉm tra l·ªói: " + MemberCardDAO.getLastError());
            }
        } catch (Exception e) {
            showAlert("L·ªói", "L·ªói khi gia h·∫°n th·∫ª: " + e.getMessage());
        }
    }

    @FXML
    private void handleDeleteCard() {
        MembershipCard selected = cardTableView.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showAlert("L·ªói", "‚ö† Vui l√≤ng ch·ªçn th·∫ª h·ªôi vi√™n ƒë·ªÉ x√≥a!");
            return;
        }

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("X√°c nh·∫≠n x√≥a th·∫ª");
        alert.setHeaderText("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·∫ª c·ªßa h·ªôi vi√™n \"" + selected.getCustomerName() + "\" (ID: " + selected.getCustomerID() + ")?");
        alert.setContentText("Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.");

        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            try {
                if (MemberCardDAO.deleteMemberCard(selected.getCustomerID())) {
                    cardList.remove(selected); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch
                    showAlert("Th√†nh c√¥ng", "üóë ƒê√£ x√≥a th·∫ª h·ªôi vi√™n.");
                } else {
                    showAlert("L·ªói", "Kh√¥ng th·ªÉ x√≥a th·∫ª. Ki·ªÉm tra l·ªói: " + MemberCardDAO.getLastError());
                }
            } catch (Exception e) {
                showAlert("L·ªói", "L·ªói khi x√≥a th·∫ª: " + e.getMessage());
            }
        }
    }



    private void searchByCustomerID() {
        String keyword = inputSearch.getText().trim();
        if (keyword.isEmpty()) {
            cardList.setAll(MemberCardDAO.getAllMemberCards());
        } else {
            cardList.setAll(MemberCardDAO.searchByCustomerID(keyword));
        }
        cardTableView.setItems(cardList);
    }


    private void displayPackageInfo() {
        MembershipPackage selected = goiComboBox.getValue();
        if (selected == null) return;
        packageIDField.setText(String.valueOf(selected.getPackageID()));
        expField.setText(String.valueOf(selected.getExp()));
    }


    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
